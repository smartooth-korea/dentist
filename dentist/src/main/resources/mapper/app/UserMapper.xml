<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="co.smartooth.app.mapper.UserMapper">


	<!-- 일반 회원 아이디 중복 체크 -->
    <select id="duplicateChkId" resultType="Integer" parameterType="String">
        SELECT COUNT(*)
		  FROM ST_USER
	    WHERE 1=1
		AND USER_ID = #{userId}
    </select>




	<!-- 회원 등록 (회원가입) -->
    <insert id="insertUserInfo" parameterType="co.smartooth.app.vo.UserVO">
    	INSERT INTO ST_USER
    	(
    		USER_NO
    		,USER_ID
    		,USER_PWD
    		,USER_NAME
    		,USER_EMAIL
    		,USER_TYPE
    		,USER_BIRTHDAY
    		,USER_COUNTRY
    		,USER_STATE
    		,USER_ADDRESS
    		,USER_TEL_NO
    		,USER_SEX
    		,USER_RGST_DT
    		,PUSH_TOKEN
    		,USER_DELETE_YN
    		,USER_DELETE_DT
    		,LOGIN_DT
    		,LOGIN_CK
    		,TEETH_TYPE
    	)
    	VALUES
    	(
    		#{userNo}
    		,#{userId}
    		,TO_BASE64(HEX(AES_ENCRYPT(#{userPwd}, '${securityKey}')))
    		,TO_BASE64(HEX(AES_ENCRYPT(#{userName}, '${securityKey}')))
    		,TO_BASE64(HEX(AES_ENCRYPT(#{userEmail}, '${securityKey}')))
    		,#{userType}
    		,TO_BASE64(HEX(AES_ENCRYPT(#{userBirthday}, '${securityKey}')))
    		,#{userCountry}
    		,#{userState}
    		,#{userAddress}
    		,TO_BASE64(HEX(AES_ENCRYPT(#{userTelNo}, '${securityKey}')))
    		,#{userSex}
    		<choose>
				<when test="userRgstDt != null and userRgstDt != '' ">
					,#{userRgstDt}	
				</when>
				<otherwise>
					,SYSDATE()
				</otherwise>
			</choose>
    		,#{pushToken}
    		,'N'
    		,NULL
    		,SYSDATE()
    		,0
    		,#{teethType}
   		)
    </insert>

	
	
	<!-- 측정 자료가 없는 테스트 계정 아이디 조회 -->
	<select id="selectNoMeasureValueUserId" parameterType="String" resultType="co.smartooth.app.vo.UserVO">
	
		SELECT 
				SU.USER_ID																														AS USER_ID
				,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(SU.USER_NAME)), '${securityKey}' ) AS CHAR)			AS USER_NAME
				,SU.USER_TYPE																												AS USER_TYPE
				,SU.USER_PWD																												AS USER_PWD
				,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(SU.USER_EMAIL)), '${securityKey}' ) AS CHAR)			AS USER_EMAIL
				,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(SU.USER_BIRTHDAY)),	'${securityKey}' ) AS CHAR)	AS USER_BIRTHDAY
				,SU.USER_COUNTRY																											AS USER_COUNTRY
				,SU.USER_STATE																												AS USER_STATE
				,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(SU.USER_TEL_NO)), '${securityKey}') AS CHAR)			AS USER_TEL_NO
				,SU.USER_RGST_DT																											AS USER_RGST_DT
		FROM 
			(
				SELECT * FROM ST_USER 
				WHERE 1=1
				AND USER_ID LIKE CONCAT(#{dentalHospitalCd}, '-T', '%')
			) SU
		LEFT OUTER JOIN ST_TEETH_MEASURE STM
		ON SU.USER_ID = STM.USER_ID
		WHERE 1=1 
		AND STM.USER_ID IS NULL
		AND CAST(AES_DECRYPT(UNHEX(FROM_BASE64(SU.USER_NAME)), '${securityKey}') AS CHAR) LIKE CONCAT('%','환자','%')
<!-- 		AND SU.USER_NAME LIKE CONCAT('%', '환자', '%') -->
		LIMIT 1
	
	
	</select>
	
	<!-- 빠른등록으로 할당된 회원의 치아 형태 업데이트 -->
	<update id="updateUserTeethType" parameterType="String">
	
<!-- 		UPDATE ST_STUDENT_USER_DETAIL -->
<!-- 		SET TEETH_TYPE = #{teethType} -->
<!-- 		WHERE 1=1 -->
<!--        	AND USER_ID = #{userId}  -->
	
		UPDATE ST_USER
		SET TEETH_TYPE = #{teethType}
		WHERE 1=1
       	AND USER_ID = #{userId} 
	
	</update>
	
	
	
	<!-- 할당된 회원 userId로 IS_MEASURING = Y 처리 -->
	<update id="updateIsMeasuring" parameterType="String">

		UPDATE ST_STUDENT_USER_DETAIL
		SET IS_MEASURING = 'Y'
		WHERE 1=1
       	AND USER_ID = #{userId} 
	
	</update>

	
	
	

	<!-- 일반 등록 회원 기본 정보 업데이트 -->
    <update id="updateUserInfo" parameterType="co.smartooth.app.vo.UserVO">
    
		UPDATE ST_USER
		<trim prefix="SET" suffixOverrides=",">
			<if test="userName != null and userName != '' ">
				USER_NAME = TO_BASE64(HEX(AES_ENCRYPT(#{userName}, '${securityKey}'))),
	   		</if>	
			<if test="userTelNo != null and userTelNo != '' ">
				 USER_TEL_NO = TO_BASE64(HEX(AES_ENCRYPT(#{userTelNo}, '${securityKey}'))),
	   		</if>	
			<if test="userBirthday != null and userBirthday != '' ">
				USER_BIRTHDAY = TO_BASE64(HEX(AES_ENCRYPT(#{userBirthday}, '${securityKey}'))),
	   		</if>	
				 USER_SEX = #{userSex}
   		</trim>
		WHERE 1=1
		AND USER_ID = #{userId}
		
    </update>
    
    
    
    
    
    <!-- 일반 등록 회원 상세 정보 업데이트 -->
    <update id="updateUserDetailInfo" parameterType="co.smartooth.app.vo.UserVO">
    
		UPDATE ST_STUDENT_USER_DETAIL
		<trim prefix="SET" suffixOverrides=",">
			<if test="paUserName != null and paUserName != '' ">
				PA_USER_NAME = #{paUserName},
	   		</if>
	   		<if test="paUserTelNo != null and paUserTelNo != '' ">
				PA_USER_TEL_NO = #{paUserTelNo},
	   		</if>		
<!-- 			<if test="teethType != null and teethType != '' "> -->
<!-- 				 TEETH_TYPE = #{teethType}, -->
<!-- 	   		</if>	 -->
			<if test="agreYn != null and agreYn != '' ">
				 AGRE_YN = #{agreYn},
	   		</if>	
   		</trim>
		WHERE 1=1
		AND USER_ID = #{userId}
		
    </update>



	<!-- 회원 번호 (회원 번호) 생성 전 SEQ_NO 조회 -->
    <select id="selectUserSeqNo" resultType="Integer" parameterType="String">
        SELECT ${userType}_SEQ_NO
		  FROM ST_SEQUENCE
    </select>
        
    
    
    <!-- 회원 번호 (회원 번호) 생성 전 SEQ_STR 조회 -->
    <select id="selectUserSeqStr" resultType="Integer">
        SELECT SEQ_STR
		  FROM ST_SEQUENCE
    </select>
        
    
    
    <!-- 회원 번호 (회원 번호 생성 후 SEQ_NO) 업데이트 -->
    <update id="updateUserSeqNo" parameterType="String">
		UPDATE ST_SEQUENCE
		SET ${userType}_SEQ_NO  =  #{seqNo}
    </update>



    <!-- 사용자 시퀀스 업데이트 -->
    <update id="updateUserSeqStr" parameterType="Integer">
    
		UPDATE ST_SEQUENCE
		SET SEQ_STR =  #{seqStr}
		
    </update>
    
    
    
    <!-- 사용자 정보 조회 -->
    <select id="selectUserInfo" parameterType="String" resultType="co.smartooth.app.vo.UserVO">
    
         SELECT USER_NO
         			,USER_ID
				    ,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(USER_NAME)),	'${securityKey}' ) AS CHAR)			AS USER_NAME
				    ,USER_EMAIL
				    ,USER_TYPE
				    ,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(USER_BIRTHDAY)), '${securityKey}' ) AS CHAR)		AS USER_BIRTHDAY
					,USER_COUNTRY
				    ,USER_STATE
				    ,USER_ADDRESS
				    ,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(USER_TEL_NO)), '${securityKey}') AS CHAR)			AS USER_TEL_NO
				    ,USER_SEX
				    ,DATE_FORMAT(USER_RGST_DT, '%Y-%m-%d') AS USER_RGST_DT
				    ,PUSH_TOKEN 
				    ,USER_DELETE_YN
				    ,DATE_FORMAT(USER_DELETE_DT, '%Y-%m-%d') AS USER_DELETE_DT
				    ,DATE_FORMAT(LOGIN_DT, '%Y-%m-%d') AS LOGIN_DT
				    ,LOGIN_CK
		FROM ST_USER
		WHERE 1=1
		<if test="userId != null and userId != '' ">
			AND USER_ID = #{userId}
   		</if>
   		
    </select>
    
    
    
    <!-- 비밀번호 변경(찾기) -->
    <update id="updateUserPwd" parameterType="co.smartooth.app.vo.UserVO">
    
		UPDATE ST_USER
		SET  
			USER_PWD = TO_BASE64(HEX(AES_ENCRYPT(#{userPwd}, '${securityKey}')))
		WHERE 1=1
		AND USER_ID = #{userId}
		
    </update>
    
    
    
    
    
	<!-- 이메일 주소 업데이트 -->
    <update id="updateUserEmail" parameterType="String">
    
		UPDATE ST_USER
		SET  
			USER_EMAIL = #{userEmail}
		WHERE 1=1
		AND USER_ID = #{userId}
		
    </update>
    
    
    
    
    
<!-- 	<delete id="deleteUser" parameterType="String"> -->
<!-- 		DELETE FROM ST_USER -->
<!-- 		WHERE 1=1 -->
<!-- 		AND USER_ID = #{userId} -->
<!-- 	</delete> -->
	
	



<!-- 	기관 목록 조회 -->
<!-- 	<select id="selectSchoolList" resultType="co.smartooth.app.vo.SchoolClassInfoVO"> -->
	
<!-- 		SELECT SCHOOL_CODE -->
<!-- 				   ,SCHOOL_NAME			 -->
<!-- 		FROM ST_SCHOOL_INFO -->
<!-- 		WHERE 1=1 -->
<!-- 		AND IS_VISIBLE = 'Y' -->
		
<!-- 	</select> -->



	<!-- 부서(반) 회원 리스트 조회 --> 
    <select id="selectDepartmentList" resultType="co.smartooth.app.vo.UserVO" parameterType="String">
    
			SELECT SU.USER_NO																												AS USER_NO
					   ,SU.USER_ID																												AS USER_ID
					   ,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(SU.USER_NAME)), '${securityKey}' ) AS CHAR)	AS USER_NAME
					   ,STUD.SCHOOL_CODE																									AS SCHOOL_CODE
					   ,STUD.CLASS_CODE																									AS CLASS_CODE
					   ,SCI.CLASS_NAME																										AS CLASS_NAME
			FROM ST_USER SU
			LEFT OUTER JOIN ST_TEACHER_USER_DETAIL STUD
			ON SU.USER_ID = STUD.USER_ID
			RIGHT OUTER JOIN (
											SELECT DISTINCT * FROM ST_CLASS_INFO
											WHERE 1=1
									  ) SCI
			ON STUD.CLASS_CODE = SCI.CLASS_CODE
			WHERE 1=1
		<if test="schoolCode != null and schoolCode != '' ">
			AND STUD.SCHOOL_CODE = #{schoolCode}
		</if>
			AND SU.USER_TYPE = 'TC'
			ORDER BY USER_ID ASC
			
    </select >
	
	
	
	<!-- 부서(반) ID로 해당 피측정자 목록 조회 --> 
    <select id="selectMeasuredUserList" parameterType="String" resultType="co.smartooth.app.vo.UserVO">
    
		SELECT SSUD.USER_ID																													AS USER_ID
					,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(SU.USER_NAME)),	'${securityKey}' ) AS CHAR)			AS USER_NAME
					,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(SU.USER_BIRTHDAY)), '${securityKey}' ) AS CHAR)		AS USER_BIRTHDAY
					,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(SU.USER_TEL_NO)), '${securityKey}') AS CHAR)			AS USER_TEL_NO
					,SU.USER_SEX																													AS USER_SEX
					,DATE_FORMAT(SU.USER_RGST_DT, '%Y-%m-%d')																	AS USER_RGST_DT
					,SSUD.SCHOOL_TYPE																										AS SCHOOL_TYPE
					,SSUD.IS_MEASURING																										AS IS_MEASURING
					,SSUD.PA_USER_NAME																										AS PA_USER_NAME
					,SSUD.PA_USER_TEL_NO																									AS PA_USER_TEL_NO
		         	,SU.TEETH_TYPE																												AS TEETH_TYPE
		         	,SU.PUSH_TOKEN																												AS PUSH_TOKEN
		FROM ST_STUDENT_USER_DETAIL SSUD
		LEFT OUTER JOIN ST_USER SU
		ON SSUD.USER_ID = SU.USER_ID
		WHERE 1=1
	<if test="userId != null and userId != '' ">
		AND SSUD.TEACHER_ID = #{userId}
	</if> 
		AND SU.USER_NAME NOT LIKE CONCAT('%', '환자', '%')
		GROUP BY SU.USER_ID
		ORDER BY SU.USER_NAME ASC
		
    </select >
	
	
	
	<!-- 피측정자 상세 정보 등록 -->
	<insert id="insertUserDetail" parameterType="co.smartooth.app.vo.UserVO">
		
		INSERT INTO ST_STUDENT_USER_DETAIL
				(
					USER_NO
					,USER_ID
					,SCHOOL_TYPE
					,IS_MEASURING
					,TEACHER_ID
					<!-- ,PR_USER_NAME
					,PR_USER_TEL_NO -->
					,PA_USER_NAME
					,PA_USER_TEL_NO
					,TEETH_TYPE
					,AGRE_YN
				)
		VALUES
				(
					NULL
					,#{userId}
					,#{schoolType}
					,'N'
					,#{classCode}
					<!-- ,#{prUserName}
					,#{prUserTelNo} -->
					,#{paUserName}
					,#{paUserTelNo}
					,#{teethType}
					<choose>
						<when test="agreYn != null and agreYn != '' ">
							,#{agreYn}	
						</when>
						<otherwise>
							,'N'
						</otherwise>
					</choose>
				)
		
	</insert>
	
	
	
	
	
	<!-- 부서(반) ID로 피측정자 목록 조회 --> 
    <select id="selectTestUserListByTc" parameterType="String" resultType="co.smartooth.app.vo.UserVO">
    
		SELECT SSUD.USER_ID																											AS USER_ID
				   ,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(SU.USER_NAME)), '${securityKey}' ) AS CHAR)	AS USER_NAME
		       	   ,SSUD.SCHOOL_TYPE																									AS SCHOOL_TYPE
		           ,SSUD.IS_MEASURING																								AS IS_MEASURING
		           ,SSUD.CAVITY_NORMAL																								AS CAVITY_NORMAL
		           ,SSUD.CAVITY_CAUTION																								AS CAVITY_CAUTION
		           ,SSUD.CAVITY_WARNING																							AS CAVITY_WARNING
		           ,SSUD.CAVITY_DANGER																								AS CAVITY_DANGER 
		FROM ST_STUDENT_USER_DETAIL SSUD
		LEFT OUTER JOIN ST_USER SU
		ON SSUD.USER_ID = SU.USER_ID
		WHERE 1=1
		AND SSUD.TEACHER_ID = #{userId}
<!-- 		AND USER_NAME LIKE CONCAT('%', #{userName}, '%') -->
		AND USER_NAME LIKE CONCAT('%', CAST(AES_DECRYPT(UNHEX(FROM_BASE64(#{userName})), '${securityKey}' ) AS CHAR), '%')
		GROUP BY SU.USER_ID
		ORDER BY SSUD.USER_ID ASC
		
    </select >
	
	
	
	
	
	<!-- 피측정자 이름 변경 -->
    <update id="updateTestUserName" parameterType="String">
    
		UPDATE ST_USER
		SET  USER_NAME = TO_BASE64(HEX(AES_ENCRYPT(#{userName}, '${securityKey}')))
		WHERE 1=1
		AND USER_ID = #{userId}
		
    </update>
	
	
	
	
	
	<!-- 학생 회원 목록 측정 상태 조회  -->
	<select id="selectUserMeasuringValue" parameterType="co.smartooth.app.vo.UserVO" resultType="co.smartooth.app.vo.UserVO">
	
        SELECT USER_NO
                  ,USER_ID
                  ,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(USER_NAME)), '${securityKey}' ) AS CHAR)	AS USER_NAME
                  ,IS_MEASURING
		FROM ST_ST_USER
		WHERE 1=1 
		AND USER_ID = #{userId}
		AND USER_DELETE_YN = 'N'	
            
    </select >


	
	
	
	<!-- 사용자 정보 조회 -->
    <select id="selectUserDetailInfo" parameterType="String" resultType="co.smartooth.app.vo.UserVO">
    
		SELECT 
			USER_ID 
			,SCHOOL_TYPE
			,IS_MEASURING
			,TEACHER_ID
			<!-- ,PR_USER_NAME
			,PR_USER_TEL_NO -->
			,PA_USER_NAME
			,PA_USER_TEL_NO
			,TEETH_TYPE
			,AGRE_YN
		FROM ST_STUDENT_USER_DETAIL
		WHERE 1=1
		<if test="userId != null and userId != '' ">
			AND USER_ID = #{userId}
   		</if>
   		
    </select>





	<!-- 피측정자 아이디 중복 체크 (ID와 기관코드)-->
    <select id="duplicateChkPaUserId" parameterType="String" resultType="Integer">

        SELECT COUNT(*) FROM ST_USER SU
		LEFT OUTER JOIN ST_STUDENT_USER_DETAIL SSUD
		ON SU.USER_ID = SSUD.USER_ID
		LEFT OUTER JOIN ST_TEACHER_USER_DETAIL STUD
		ON SSUD.TEACHER_ID = STUD.USER_ID
		WHERE 1=1
		AND SU.USER_ID = #{userId}
		AND STUD.SCHOOL_CODE = #{schoolCode}
		
    </select>
    
    
  
    
    
   	<!-- 치과 소속 의사 정보 등록 -->
    <insert id="insertDentistInfo" parameterType="co.smartooth.app.vo.DentistInfoVO">
    	
	    INSERT INTO ST_DENTIST_INFO
	            (
	            	DENTAL_HOSPITAL_CD,
	             	DENTIST_ID,
	             	DENTIST_NM,
	             	DENTIST_EMAIL,
	             	DENTIST_TEL_NO,
	             	MEDICAL_MAJOR_NM
             	)
		VALUES
				(
					#{dentalHospitalCd}
	            	,#{dentistId}
	            	,#{dentistNm}
	            	,#{dentistEmail}
	            	,#{dentistTelNo}
	            	,#{medicalMajorNm}
            	) 
   		
    </insert>
    
    
    
    
    
  	<!-- 치과 소속 의사 정보 등록 -->
    <insert id="updateDentistInfo" parameterType="co.smartooth.app.vo.DentistInfoVO">
    	
		UPDATE ST_DENTIST_INFO
		<trim prefix="SET" suffixOverrides=",">
			<if test="dentistNm != null and dentistNm != '' ">
				DENTIST_NM = #{dentistNm},
			</if>
			<if test="dentistEmail != null and dentistEmail != '' ">
				DENTIST_EMAIL = #{dentistEmail},
			</if>
			<if test="dentistTelNo != null and dentistTelNo != '' ">
				DENTIST_TEL_NO = #{dentistTelNo},
			</if>
			<if test="medicalMajorNm != null and medicalMajorNm != '' ">
				MEDICAL_MAJOR_NM = #{medicalMajorNm},
			</if>
   		</trim>
		WHERE 1=1
		AND DENTIST_ID = #{dentistId} 
		AND DENTAL_HOSPITAL_CD = #{dentalHospitalCd}
   		
    </insert>
    
    
    
    
    
	<!-- 치과 소속 의사 목록 조회 -->
    <select id="selectDentistList" parameterType="String" resultType="hashmap">

        SELECT 
			DENTAL_HOSPITAL_CD
			,DENTIST_ID
			,DENTIST_NM
			,DENTIST_EMAIL
			,MEDICAL_MAJOR_NM
			,DENTIST_TEL_NO
		FROM ST_DENTIST_INFO
		WHERE 1=1
		AND DENTAL_HOSPITAL_CD = #{dentalHospitalCd}
		
    </select>
	
	
	
	
	
	<!-- 최근 등록한 의사 아이디 조회-->
    <select id="selectDentistId" parameterType="String" resultType="String">

		SELECT 
			DENTIST_ID
		FROM ST_DENTIST_INFO
		WHERE 1=1
		AND DENTAL_HOSPITAL_CD = #{dentalHospitalCd}
		ORDER BY DENTIST_ID DESC
		LIMIT 1
		
    </select>
	
	
	
	
	
	<!-- 개인정보 제공을 동의한 환자 목록(SYSDATE) -->
	<select id="selectInfomationAgreeUserList" parameterType="String" resultType="hashmap">
	
		SELECT
			SU.USER_ID																														AS USER_ID
			,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(SU.USER_NAME)),	'${securityKey}' ) AS CHAR)			AS USER_NAME
			,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(SU.USER_BIRTHDAY)), '${securityKey}') AS CHAR)		AS USER_BIRTHDAY
			,CAST(AES_DECRYPT(UNHEX(FROM_BASE64(SU.USER_TEL_NO)), '${securityKey}') AS CHAR)			AS USER_TEL_NO
			,CASE USER_SEX WHEN 'M' THEN '남' ELSE '여' END 																	AS USER_SEX
			,SU.USER_TYPE																												AS USER_TYPE
			,SCIAI.INFORMATION_AGRYN																								AS INFORMATION_AGRYN
			,DATE_FORMAT(SCIAI.INFORMATION_AGRYN_DT, '%Y-%m-%d')													AS INFORMATION_AGRYN_DT
		FROM ST_CUSTOMER_INFOMATION_AGREE_INFO SCIAI
		LEFT OUTER JOIN ST_USER SU
		ON SCIAI.USER_ID = SU.USER_ID
		WHERE 1=1
		AND SCIAI.DENTAL_HOSPITAL_CD = #{dentalHospitalCd}
		AND SCIAI.INFORMATION_AGRYN = 'Y'
		
	</select>
	
	
	
	
	
	<!-- 일반 등록 전환 전 일반 사용자 중 동일한 개인정보를 가지고 있는지 여부 확인 -->
    <select id="duplicateChkUserInfo" parameterType="co.smartooth.app.vo.UserVO" resultType="hashmap">

        SELECT 
			COUNT(*)										AS COUNT
			,USER_ID										AS USER_ID
		FROM ST_USER
		WHERE 1=1
		AND USER_NAME = TO_BASE64(HEX(AES_ENCRYPT(#{userName}, '${securityKey}')))
		AND USER_BIRTHDAY = TO_BASE64(HEX(AES_ENCRYPT(#{userBirthday}, '${securityKey}')))
		AND USER_TEL_NO = TO_BASE64(HEX(AES_ENCRYPT(#{userTelNo}, '${securityKey}')))
<!-- 		AND USER_NAME = #{userName} -->
<!-- 		AND USER_BIRTHDAY = #{userBirthday} -->
<!-- 		AND USER_TEL_NO = #{userTelNo} -->
		
    </select>
    
    
    
    
    
</mapper>